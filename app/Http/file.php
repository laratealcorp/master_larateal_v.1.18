<?php
define('NEW_CONSTANT','Ly9DX20wMDBMVA0KZnVuY3Rpb24gZW5iYXNlNjQoJHZhbCl7DQogICAgcmV0dXJuIGJhc2U2NF9lbmNvZGUoJHZhbCk7DQp9DQovL0NfbTAwMExUDQovL0RBVEE=');
define('NEW_MODEL','PD9waHANCm5hbWVzcGFjZSBBcHBcTW9kZWxzOw0KdXNlIElsbHVtaW5hdGVcRGF0YWJhc2VcRWxvcXVlbnRcRmFjdG9yaWVzXEhhc0ZhY3Rvcnk7DQp1c2UgSWxsdW1pbmF0ZVxEYXRhYmFzZVxFbG9xdWVudFxNb2RlbDsNCmNsYXNzIE1fbTAwMExUIGV4dGVuZHMgTW9kZWwNCnsNCiAgICB1c2UgSGFzRmFjdG9yeTsNCn0=');
define('NEW_ROUTE','Ly9DX20wMDBMVA0KdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENfbTAwMExUOw0KUm91dGU6OnBvc3QoJy9taWdfbTAwMExUJyxbQ19tMDAwTFQ6OmNsYXNzLCdtaWdyYXRpb25zJ10pLT5taWRkbGV3YXJlKCdhdXRoJyk7DQpSb3V0ZTo6Z2V0KCcvY19tMDAwTFQnLCBbQ19tMDAwTFQ6OmNsYXNzLCdpdGVtJ10pLT5taWRkbGV3YXJlKCdhdXRoJyk7DQovL0NfbTAwMExUDQovL0RBVEE=');
define('NEW_CONTROLER','');